"""Create initial schema.

Revision ID: 2e1f6f978680
Revises:
Create Date: 2025-07-02 16:40:37.529591

"""
from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '2e1f6f978680'
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('batch_scans',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('batch_id', sa.String(), nullable=False),
    sa.Column('directories', sa.JSON(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('total_directories', sa.Integer(), nullable=True),
    sa.Column('completed_directories', sa.Integer(), nullable=True),
    sa.Column('failed_directories', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_batch_scans_batch_id'), 'batch_scans', ['batch_id'], unique=True)
    op.create_index(op.f('ix_batch_scans_start_time'), 'batch_scans', ['start_time'], unique=False)
    op.create_table('directory_scans',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('scan_id', sa.String(), nullable=False),
    sa.Column('directory_path', sa.String(), nullable=False),
    sa.Column('scan_strategy', sa.String(), nullable=False),
    sa.Column('scan_options', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('total_files', sa.Integer(), nullable=True),
    sa.Column('processed_files', sa.Integer(), nullable=True),
    sa.Column('successful_files', sa.Integer(), nullable=True),
    sa.Column('failed_files', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('estimated_completion', sa.DateTime(), nullable=True),
    sa.Column('errors', sa.JSON(), nullable=True),
    sa.Column('directory_stats', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_directory_scans_directory_path'), 'directory_scans', ['directory_path'], unique=False)
    op.create_index(op.f('ix_directory_scans_scan_id'), 'directory_scans', ['scan_id'], unique=True)
    op.create_index(op.f('ix_directory_scans_start_time'), 'directory_scans', ['start_time'], unique=False)
    op.create_table('photos',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('file_path', sa.String(), nullable=False),
    sa.Column('file_hash', sa.String(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_modified', sa.DateTime(), nullable=False),
    sa.Column('mime_type', sa.String(), nullable=False),
    sa.Column('file_extension', sa.String(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('processing_status', sa.String(), nullable=True),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_photos_file_hash'), 'photos', ['file_hash'], unique=False)
    op.create_index(op.f('ix_photos_file_path'), 'photos', ['file_path'], unique=True)
    op.create_table('photo_ai_analysis',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('photo_id', sa.String(), nullable=False),
    sa.Column('analysis_type', sa.String(), nullable=False),
    sa.Column('model_name', sa.String(), nullable=False),
    sa.Column('model_version', sa.String(), nullable=True),
    sa.Column('confidence_threshold', sa.Float(), nullable=True),
    sa.Column('results', sa.JSON(), nullable=False),
    sa.Column('embedding_vector', sa.JSON(), nullable=True),
    sa.Column('embedding_dimensions', sa.Integer(), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['photo_id'], ['photos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_photo_ai_analysis_photo_id'), 'photo_ai_analysis', ['photo_id'], unique=False)
    op.create_table('photo_metadata',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('photo_id', sa.String(), nullable=False),
    sa.Column('camera_make', sa.String(), nullable=True),
    sa.Column('camera_model', sa.String(), nullable=True),
    sa.Column('lens_model', sa.String(), nullable=True),
    sa.Column('focal_length', sa.Float(), nullable=True),
    sa.Column('aperture', sa.Float(), nullable=True),
    sa.Column('shutter_speed', sa.String(), nullable=True),
    sa.Column('iso', sa.Integer(), nullable=True),
    sa.Column('flash', sa.String(), nullable=True),
    sa.Column('exposure_mode', sa.String(), nullable=True),
    sa.Column('metering_mode', sa.String(), nullable=True),
    sa.Column('white_balance', sa.String(), nullable=True),
    sa.Column('date_taken', sa.DateTime(), nullable=True),
    sa.Column('date_digitized', sa.DateTime(), nullable=True),
    sa.Column('date_modified', sa.DateTime(), nullable=True),
    sa.Column('gps_latitude', sa.Float(), nullable=True),
    sa.Column('gps_longitude', sa.Float(), nullable=True),
    sa.Column('gps_altitude', sa.Float(), nullable=True),
    sa.Column('gps_direction', sa.Float(), nullable=True),
    sa.Column('color_space', sa.String(), nullable=True),
    sa.Column('orientation', sa.Integer(), nullable=True),
    sa.Column('resolution_x', sa.Float(), nullable=True),
    sa.Column('resolution_y', sa.Float(), nullable=True),
    sa.Column('resolution_unit', sa.String(), nullable=True),
    sa.Column('software', sa.String(), nullable=True),
    sa.Column('artist', sa.String(), nullable=True),
    sa.Column('copyright', sa.String(), nullable=True),
    sa.Column('raw_exif', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['photo_id'], ['photos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_photo_metadata_date_taken'), 'photo_metadata', ['date_taken'], unique=False)
    op.create_index(op.f('ix_photo_metadata_gps_latitude'), 'photo_metadata', ['gps_latitude'], unique=False)
    op.create_index(op.f('ix_photo_metadata_gps_longitude'), 'photo_metadata', ['gps_longitude'], unique=False)
    op.create_index(op.f('ix_photo_metadata_photo_id'), 'photo_metadata', ['photo_id'], unique=False)
    op.create_table('photo_tags',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('photo_id', sa.String(), nullable=False),
    sa.Column('tag', sa.String(), nullable=False),
    sa.Column('tag_type', sa.String(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['photo_id'], ['photos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('photo_id', 'tag', 'tag_type', name='unique_photo_tag')
    )
    op.create_index(op.f('ix_photo_tags_photo_id'), 'photo_tags', ['photo_id'], unique=False)
    op.create_index(op.f('ix_photo_tags_tag'), 'photo_tags', ['tag'], unique=False)
    op.create_table('scan_photo_entries',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('scan_id', sa.String(), nullable=False),
    sa.Column('photo_id', sa.String(), nullable=True),
    sa.Column('discovered_path', sa.String(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('file_modified', sa.DateTime(), nullable=True),
    sa.Column('processing_status', sa.String(), nullable=True),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['photo_id'], ['photos.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scan_id'], ['directory_scans.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scan_photo_entries_photo_id'), 'scan_photo_entries', ['photo_id'], unique=False)
    op.create_index(op.f('ix_scan_photo_entries_scan_id'), 'scan_photo_entries', ['scan_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_scan_photo_entries_scan_id'), table_name='scan_photo_entries')
    op.drop_index(op.f('ix_scan_photo_entries_photo_id'), table_name='scan_photo_entries')
    op.drop_table('scan_photo_entries')
    op.drop_index(op.f('ix_photo_tags_tag'), table_name='photo_tags')
    op.drop_index(op.f('ix_photo_tags_photo_id'), table_name='photo_tags')
    op.drop_table('photo_tags')
    op.drop_index(op.f('ix_photo_metadata_photo_id'), table_name='photo_metadata')
    op.drop_index(op.f('ix_photo_metadata_gps_longitude'), table_name='photo_metadata')
    op.drop_index(op.f('ix_photo_metadata_gps_latitude'), table_name='photo_metadata')
    op.drop_index(op.f('ix_photo_metadata_date_taken'), table_name='photo_metadata')
    op.drop_table('photo_metadata')
    op.drop_index(op.f('ix_photo_ai_analysis_photo_id'), table_name='photo_ai_analysis')
    op.drop_table('photo_ai_analysis')
    op.drop_index(op.f('ix_photos_file_path'), table_name='photos')
    op.drop_index(op.f('ix_photos_file_hash'), table_name='photos')
    op.drop_table('photos')
    op.drop_index(op.f('ix_directory_scans_start_time'), table_name='directory_scans')
    op.drop_index(op.f('ix_directory_scans_scan_id'), table_name='directory_scans')
    op.drop_index(op.f('ix_directory_scans_directory_path'), table_name='directory_scans')
    op.drop_table('directory_scans')
    op.drop_index(op.f('ix_batch_scans_start_time'), table_name='batch_scans')
    op.drop_index(op.f('ix_batch_scans_batch_id'), table_name='batch_scans')
    op.drop_table('batch_scans')
    # ### end Alembic commands ###
