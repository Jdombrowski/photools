[tool.poetry]
name = "photools"
version = "0.1.0"
description = "Media cataloging suite for managing and executing AI model routing within a photo metadata database"
authors = ["Jonathan Dombrowski <jdombrowski416@gmail.com>"]
license = "MIT"
package-mode = false
readme = "README.md"

[tool.poetry.group.dev.dependencies]
pytest-cov = "^6.2.1"
pylint = "^3.0.0"

[tool.pyright]
venvPath = "."
venv = ".venv"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.110.0"
uvicorn = "^0.30.0"
psutil = "^7.0.0"
black = "^25.1.0"
pytest = "^8.4.1"
ruff = "^0.12.0"
python-multipart = "^0.0.20"
pillow = "^11.2.1"
redis = "4.6.0"
aiofiles = "^24.1.0"
celery = {version = "5.2.7", extras = ["redis"]}
pydantic-settings = "^2.10.1"
httpx = "^0.28.1"
alembic = "^1.16.2"
psycopg2-binary = "^2.9.10"
asyncpg = "^0.30.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.41"}

[tool.poetry.scripts]
start = "photools.main:start"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Comprehensive rule selection for maximum coverage
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "UP",     # pyupgrade
    "C4",     # flake8-comprehensions
    "PYI",    # flake8-pyi
    "FA",     # flake8-future-annotations
    "S",      # flake8-bandit
    "D",      # pydocstyle
    "PERF",   # perflint
    "TID",    # flake8-tidy-imports
    "C90",    # mccabe (basic complexity)
]

# Ignore specific rules handled by pylint or inappropriate for this project
ignore = [
    "D100",   # Missing docstring in public module (pylint handles better)
    "D101",   # Missing docstring in public class (pylint handles better)
    "D102",   # Missing docstring in public method (pylint handles better)
    "D103",   # Missing docstring in public function (pylint handles better)
    "D104",   # Missing docstring in public package (pylint handles better)
    "C901",   # Complex function (pylint handles with better metrics)
    "S101",   # Use of assert (acceptable in tests)
    "TID252", # Relative imports (acceptable in our architecture)
    "D203",   # One blank line before class (conflicts with D211)
    "D213",   # Multi-line docstring second line (conflicts with D212)
]

# Per-file ignores for appropriate contexts
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S"]  # Relaxed docs and security for tests
"scripts/*" = ["D", "S101"]  # Relaxed for utility scripts
"src/infrastructure/*" = ["D100", "D101"]  # Infrastructure can have relaxed docs
"src/api/main.py" = ["S104"]  # Allow binding to all interfaces in main

[tool.ruff.lint.mccabe]
max-complexity = 10  # Basic complexity threshold (pylint handles detailed analysis)

[tool.pylint.main]
# Focus on complexity and design analysis
load-plugins = []
disable = [
    # Rules handled by ruff
    "line-too-long",
    "trailing-whitespace", 
    "missing-final-newline",
    "unused-import",
    "wrong-import-order",
    # Style rules ruff handles better
    "invalid-name",
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    # Focus on complexity, not style
    "too-few-public-methods",
]

enable = [
    # Complexity metrics
    "cyclic-import",
    "too-many-branches",
    "too-many-statements", 
    "too-many-locals",
    "too-many-arguments",
    # Design patterns
    "unused-variable",
    "unused-argument", 
    "unreachable",
    # Logic errors
    "undefined-variable",
    "used-before-assignment",
]

[tool.pylint.reports]
output-format = "colorized"
reports = true
score = true

[tool.pylint.refactoring]
max-nested-blocks = 5

[tool.pylint.design]
max-args = 7
max-locals = 15
max-branches = 12
max-statements = 50
max-attributes = 10
max-public-methods = 20

[tool.pylint.similarities]
min-similarity-lines = 10

[tool.pytest.ini_options]
# Concise output by default for better scanning
addopts = [
    "--tb=short",           # Short traceback format
    "--strict-markers",     # Strict marker validation
    "--disable-warnings",   # Hide warnings unless running verbose
    "-ra",                  # Show extra test summary info for all except passed
    "--color=yes",          # Force color output
]

# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Markers for categorizing tests
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests",
    "requires_db: Tests requiring database",
    "requires_redis: Tests requiring Redis",
]

# Console output options
console_output_style = "progress"  # progress, classic, or count
log_cli = false
log_cli_level = "INFO"
