# Infrastructure-only Docker Compose for Local Development
# This provides PostgreSQL and Redis for local development
# API and Celery workers run locally via Poetry

services:
  # PostgreSQL Database
  postgres:
    image: postgres:${POSTGRES_VERSION:-15-alpine}
    container_name: ${PROJECT_NAME:-photools}-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-photo_catalog}
      POSTGRES_USER: ${POSTGRES_USER:-photo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-photo_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-photo_user} -d ${POSTGRES_DB:-photo_catalog}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: ${PROJECT_NAME:-photools}-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --port 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  default:
    name: ${PROJECT_NAME:-photools}-dev-network